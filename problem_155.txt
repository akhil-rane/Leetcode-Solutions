/*
Problem Description:

Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.

Example:
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin();   --> Returns -3.
minStack.pop();
minStack.top();      --> Returns 0.
minStack.getMin();   --> Returns -2.
*/

import java.util.Stack;

public class MinStack {

    Stack<Node> stack = new Stack<Node>();
    
    public MinStack() {
    }
    
    public void push(int x) {        
    	Node node = new Node();
    	node.val=x;    	
        if(stack.size()==0||x<stack.peek().min) node.min=x;
        else node.min=stack.peek().min;
        stack.add(node);
    }
    
    public void pop() {
        stack.pop();
    }
    
    public int top() {
        return stack.peek().val;
    }
    
    public int getMin() {
        return stack.peek().min;
    }
    
    public class Node{
    	public int val;
    	public int min; 	    	
    };
}