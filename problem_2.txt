/*
Problem Description:
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
*/
import java.util.ArrayList;
import java.util.List;

public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
    	
    	int carry,num1,num2;
    	
    	int temp1 = l1.val+l2.val;
        ListNode temp = null;
                
        if(temp1>9){
    	    temp = new ListNode(temp1%10);
    	    carry = 1;
    	}
    	else{
    		temp = new ListNode(temp1);
    		carry=0;
    	}	
        ListNode result = temp;
        
        l1=l1.next;
        l2=l2.next;
        
        ListNode next = null;
    	
    	while(l1!=null||l2!=null){    		
    		
    		if(l1!=null){
    			num1=l1.val;
    			l1=l1.next;
    		}
    		else
    			num1=0;
    		
    		if(l2!=null){
    			num2=l2.val;
    			l2=l2.next;
    		}
    		else
    			num2=0;
    		
    		temp1=num1+num2+carry;
			
			if(temp1>9){
			   
			   next = new ListNode(temp1%10);
			   carry = 1;
			}
			else{			
				next = new ListNode(temp1);
				carry=0;
			}
			temp.next = next; 
		    temp = next;	
    		
    	}
    	
    	if(carry>0){
    	    next = new ListNode(carry);
    	    temp.next=next;
    	}
    	    
    	
    	return result;
    }
}